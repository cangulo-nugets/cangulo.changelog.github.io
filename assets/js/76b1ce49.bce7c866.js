"use strict";(self.webpackChunkcangulo_changelog_github_io=self.webpackChunkcangulo_changelog_github_io||[]).push([[145],{5220:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return m},toc:function(){return c},default:function(){return h}});var l=a(7462),n=a(3366),o=(a(7294),a(3905)),i=a(6785),r=(a(1007),a(6396),a(8215),["components"]),s={title:"Implementation",authors:"cangulo"},u=void 0,m={unversionedId:"implementation",id:"implementation",isDocsHomePage:!1,title:"Implementation",description:"First of all, let me refresh the main goals we have:",source:"@site/docs/2-implementation.md",sourceDirName:".",slug:"/implementation",permalink:"/cangulo.changelog.github.io/docs/implementation",editUrl:"https://github.com/cangulo/cangulo.changelog.github.io/blob/docs/2-implementation.md",tags:[],version:"current",lastUpdatedBy:"Carlos Angulo",lastUpdatedAt:1639060031,formattedLastUpdatedAt:"12/9/2021",sidebarPosition:2,frontMatter:{title:"Implementation",authors:"cangulo"},sidebar:"tutorialSidebar",previous:{title:"Idea",permalink:"/cangulo.changelog.github.io/docs/"},next:{title:"Registering the services",permalink:"/cangulo.changelog.github.io/docs/registering-the-services"}},c=[],g={toc:c};function h(e){var t=e.components,a=(0,n.Z)(e,r);return(0,o.kt)("wrapper",(0,l.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"First of all, let me refresh the main goals we have: "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Update the changelog "),(0,o.kt)("li",{parentName:"ul"},"Create the release notes. ")),(0,o.kt)("p",null,"Perfect, next are the interfaces for those goals."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"IReleaseNotesBuilder"),(0,o.kt)("li",{parentName:"ul"},"IChangelogBuilder")),(0,o.kt)("p",null,"In order to have reusable classes between both processes. I implemented the following classes for the MD operations:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"IChangelogVersionNotesBuilder: ",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Class that builds a Changelog Section with the changes provided."),(0,o.kt)("li",{parentName:"ul"},"Called by the IChangelogBuilder. "),(0,o.kt)("li",{parentName:"ul"},"Use all the MD classes to build the Changelog."))),(0,o.kt)("li",{parentName:"ul"},"IChangesListAreaBuilder: ",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Receives a list of changes (commit messages) and creates a list in MD format. "),(0,o.kt)("li",{parentName:"ul"},"Called by IChangelogVersionNotesBuilder and IReleaseNotesBuilder.")))),(0,o.kt)("p",null,"As I want to be able to support both commits types (Conventional and Non Conventional) I have two implementations for the IChangesListAreaBuilder:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"ChangesAreaBuilderForConventionalCommits",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"It group the commits received by type."))),(0,o.kt)("li",{parentName:"ul"},"ChangesAreaBuilderForNonConventionalCommits",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"It simply list the commits received")))),(0,o.kt)("hr",null),(0,o.kt)(i.ShareDocusaurus,{slug:"docs/implementation",title:"cangulo.changelog - Idea and how I use it",tags:["nuke","cicd","cangulo.changelog","conventional_commits","changelog"],mdxType:"ShareDocusaurus"}))}h.isMDXComponent=!0}}]);