"use strict";(self.webpackChunkcangulo_github_io=self.webpackChunkcangulo_github_io||[]).push([[477],{3238:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return h},metadata:function(){return k},toc:function(){return g},default:function(){return v}});var a=n(7462),o=n(3366),l=(n(7294),n(3905)),i=n(2093),r=(n(7440),n(615)),s=n(996),m=n(1007),u=n(6396),c=n(8215),d=["components"],p={title:"Idea",slug:"/",date:new Date("2021-11-26T00:00:00.000Z"),authors:"cangulo"},h=void 0,k={unversionedId:"idea",id:"idea",isDocsHomePage:!1,title:"Idea",description:"The problem I want to solve",source:"@site/docs/1-idea.md",sourceDirName:".",slug:"/",permalink:"/cangulo.changelog.github.io/docs/",editUrl:"https://github.com/cangulo/cangulo.changelog.github.io/blob/docs/1-idea.md",tags:[],version:"current",lastUpdatedAt:1637535104,formattedLastUpdatedAt:"11/21/2021",sidebarPosition:1,frontMatter:{title:"Idea",slug:"/",date:"2021-11-26T00:00:00.000Z",authors:"cangulo"},sidebar:"tutorialSidebar",next:{title:"Implementation",permalink:"/cangulo.changelog.github.io/docs/implementation"}},g=[{value:"The problem I want to solve",id:"the-problem-i-want-to-solve",children:[{value:"Input: Commits from a merged PR",id:"input-commits-from-a-merged-pr",children:[],level:3},{value:"Output: Changelog Updated",id:"output-changelog-updated",children:[{value:"Non Conventional Commits",id:"non-conventional-commits",children:[],level:4}],level:3}],level:2}],f={toc:g};function v(e){var t=e.components,n=(0,o.Z)(e,d);return(0,l.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"the-problem-i-want-to-solve"},"The problem I want to solve"),(0,l.kt)("p",null,"In my GitHub repos I am using the dotnet project ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/cangulo-nuke/cangulo.nuke.releasecreator"},"cangulo.nuke.releasecreator")," for releasing a new version every time I merge a PR to the main branch. For that, I have to follow the next conventions:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The App follows ",(0,l.kt)("a",{parentName:"li",href:"https://semver.org"},"Semantic Versioning.")),(0,l.kt)("li",{parentName:"ul"},"All PR contain ",(0,l.kt)("a",{parentName:"li",href:"https://www.conventionalcommits.org/en/v1.0.0/"},"Conventional Commits")," which set the release to be created (",(0,l.kt)("em",{parentName:"li"},"major"),", ",(0,l.kt)("em",{parentName:"li"},"minor")," or ",(0,l.kt)("em",{parentName:"li"},"fix"),").")),(0,l.kt)("p",null,"At this point, I have a release process but I'm not documenting the changes. There are two places where I should post them:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The release notes"),(0,l.kt)("li",{parentName:"ol"},"The changelog")),(0,l.kt)("p",null,"As cangulo.nuke.releasecreator is already using the commit messages for calculating the next version, I created ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"cangulo.changelog"))," solution to list them in the two places mentioned before."),(0,l.kt)("p",null,"Maybe you would say, okay, why do you need a custom solution? Why don't you do it in the GH Action itself or in the ",(0,l.kt)("em",{parentName:"p"},"cangulo.nuke.releasecreator")," project? Well, when I started working on this I realize it was not so simple, here is what I took into account:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The Changelog is a Markdown (MD) file, so adding the changes is not directly appending text, we should format."),(0,l.kt)("li",{parentName:"ul"},"To make the Changelog more formal we should add other elements as:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Header containing the version number"),(0,l.kt)("li",{parentName:"ul"},"A Date to know when that release was created (okay, this is a ",(0,l.kt)("em",{parentName:"li"},"nice to have")," \ud83d\ude01)"),(0,l.kt)("li",{parentName:"ul"},"Future elements as contributors, PR link, Link to the tests reports executed. Yes, I'm going too far, I will keep this for future versions \ud83d\ude04")))),(0,l.kt)("p",null,"Although MD is easy to write, it requires to format the text when creating elements (",(0,l.kt)("inlineCode",{parentName:"p"},"#")," for headers ",(0,l.kt)("inlineCode",{parentName:"p"},"* ")," for list item, etc). So, to avoid doing that logic in shell scripts or mixing domains (release process and changelog update), I decided to implement this in a separate repository, the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/cangulo-nugets/cangulo.changelog"},"cangulo.changelog repository"),". Let me give an example of the input and output expected."),(0,l.kt)("h3",{id:"input-commits-from-a-merged-pr"},"Input: Commits from a merged PR"),(0,l.kt)("p",null,"The release 0.0.2 is created after merging a PR with the next commits list:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"fix: Solved bug in the TransactionsController that makes transactions fail"),(0,l.kt)("li",{parentName:"ul"},"refactor: Simplified Transactions Repository"),(0,l.kt)("li",{parentName:"ul"},"docs: Updated docs/examples"),(0,l.kt)("li",{parentName:"ul"},"feat: Implemented new DocumentsController"),(0,l.kt)("li",{parentName:"ul"},"refactor: It's possible! You can turn a 50-line code chunk into just 3 lines. Here's how -> Please never write a commit message like this \ud83d\ude1c, you can find more funny messages ",(0,l.kt)("a",{parentName:"li",href:"http://whatthecommit.com/85835a6ce3edb747ec06e42f6313d0a2"},"here"),".")),(0,l.kt)("h3",{id:"output-changelog-updated"},"Output: Changelog Updated"),(0,l.kt)("p",null,"Next is the changelog section I would like to have for version 0.0.2:"),(0,l.kt)(m.Z,{mdxType:"BrowserWindow"},(0,l.kt)(u.Z,{mdxType:"Tabs"},(0,l.kt)(c.Z,{value:"markdown",label:"Markdown Code",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markdown"},"# 0.0.2\n\n2021-11-20\n\nfix:\n-   Solved bug in the TransactionsController that makes transactions fail\n\nrefactor:\n-   Simplified Transactions Repository\n-   It's possible! You can turn a 50-line code chunk into just 3 lines. Here's how\n\ndocs:\n-   Updated docs/examples\n\nfeatures:\n-   Implemented new DocumentsController\n"))),(0,l.kt)(c.Z,{value:"html",label:"Changelog Visualization",default:!0,mdxType:"TabItem"},(0,l.kt)("h1",{id:"002"},"0.0.2"),(0,l.kt)("p",null,"2021-11-20"),(0,l.kt)("p",null,"fix:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Solved bug in the TransactionsController that makes transactions fail")),(0,l.kt)("p",null,"refactor:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Simplified Transactions Repository"),(0,l.kt)("li",{parentName:"ul"},"It's possible! You can turn a 50-line code chunk into just 3 lines. Here's how")),(0,l.kt)("p",null,"docs:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Updated docs/examples")),(0,l.kt)("p",null,"features:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Implemented new DocumentsController"))))),(0,l.kt)("br",null),(0,l.kt)("p",null,"Please note the commits are grouped by type: ",(0,l.kt)("em",{parentName:"p"},"fix, refactor, docs")),(0,l.kt)("h4",{id:"non-conventional-commits"},"Non Conventional Commits"),(0,l.kt)("p",null,"I also would like to accept non conventional commits. The only difference would be commits won't be grouped."),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("details",null,(0,l.kt)("summary",null,"Output for non conventional commits"),(0,l.kt)(m.Z,{mdxType:"BrowserWindow"},(0,l.kt)(u.Z,{mdxType:"Tabs"},(0,l.kt)(c.Z,{value:"markdown",label:"Markdown Code",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-markdown"},"# 0.0.2\n\n2021-11-20\n\n* fix: Solved bug in the TransactionsController that makes transactions fail\n* refactor: Simplified Transactions Repository\n* docs: Updated docs/examples\n* feat: Implemented new DocumentsController\n* refactor: It's possible! You can turn a 50-line code chunk into just 3 lines. Here's how\n")),"  "),(0,l.kt)(c.Z,{value:"html",label:"Changelog Visualization",default:!0,mdxType:"TabItem"},(0,l.kt)("h1",{parentName:"div",id:"002-1"},"0.0.2"),(0,l.kt)("p",{parentName:"div"},"2021-11-20"),(0,l.kt)("ul",{parentName:"div"},(0,l.kt)("li",{parentName:"ul"},"fix: Solved bug in the TransactionsController that makes transactions fail"),(0,l.kt)("li",{parentName:"ul"},"refactor: Simplified Transactions Repository"),(0,l.kt)("li",{parentName:"ul"},"docs: Updated docs/examples"),(0,l.kt)("li",{parentName:"ul"},"feat: Implemented new DocumentsController"),(0,l.kt)("li",{parentName:"ul"},"refactor: It's possible! You can turn a 50-line code chunk into just 3 lines. Here's how")),"  ")))))),(0,l.kt)(s.ZP,{mdxType:"AboutMePostArea"}),(0,l.kt)(i.Z,{slug:"projects/1-cangulo.changelog-idea-and-how-to-use",title:"cangulo.changelog - Idea and how I use it",tags:["nuke","cicd","cangulo.changelog","conventional_commits","changelog"],mdxType:"ShareCard"}),(0,l.kt)(r.Z,{slug:"projects/1-cangulo.changelog-idea-and-how-to-use",mdxType:"Comments"}))}v.isMDXComponent=!0}}]);