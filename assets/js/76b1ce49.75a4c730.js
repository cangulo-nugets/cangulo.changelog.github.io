"use strict";(self.webpackChunkcangulo_github_io=self.webpackChunkcangulo_github_io||[]).push([[145],{5220:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return m},toc:function(){return c},default:function(){return p}});var a=n(7462),l=n(3366),i=(n(7294),n(3905)),o=n(2093),r=(n(7440),n(615),n(996),n(1007),n(6396),n(8215),["components"]),s={title:"Implementation"},u=void 0,m={unversionedId:"implementation",id:"implementation",isDocsHomePage:!1,title:"Implementation",description:"First of all, let me refresh the main goals we have:",source:"@site/docs/2-implementation.md",sourceDirName:".",slug:"/implementation",permalink:"/cangulo.changelog.github.io/docs/implementation",editUrl:"https://github.com/cangulo/cangulo.changelog.github.io/blob/docs/2-implementation.md",tags:[],version:"current",lastUpdatedAt:1638406814,formattedLastUpdatedAt:"12/2/2021",sidebarPosition:2,frontMatter:{title:"Implementation"},sidebar:"tutorialSidebar",previous:{title:"Idea",permalink:"/cangulo.changelog.github.io/docs/"},next:{title:"Registering the services",permalink:"/cangulo.changelog.github.io/docs/registering-the-services"}},c=[],g={toc:c};function p(e){var t=e.components,n=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"First of all, let me refresh the main goals we have: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Update the changelog "),(0,i.kt)("li",{parentName:"ul"},"Create the release notes. ")),(0,i.kt)("p",null,"Perfect, next are the interfaces for those goals."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"IReleaseNotesBuilder"),(0,i.kt)("li",{parentName:"ul"},"IChangelogBuilder")),(0,i.kt)("p",null,"In order to have reusable classes between both processes. I implemented the following classes for the MD operations:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"IChangelogVersionNotesBuilder: ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Class that builds a Changelog Section with the changes provided."),(0,i.kt)("li",{parentName:"ul"},"Called by the IChangelogBuilder. "),(0,i.kt)("li",{parentName:"ul"},"Use all the MD classes to build the Changelog."))),(0,i.kt)("li",{parentName:"ul"},"IChangesListAreaBuilder: ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Receives a list of changes (commit messages) and creates a list in MD format. "),(0,i.kt)("li",{parentName:"ul"},"Called by IChangelogVersionNotesBuilder and IReleaseNotesBuilder.")))),(0,i.kt)("p",null,"As I want to be able to support both commits types (Conventional and Non Conventional) I have two implementations for the IChangesListAreaBuilder:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ChangesAreaBuilderForConventionalCommits",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"It group the commits received by type."))),(0,i.kt)("li",{parentName:"ul"},"ChangesAreaBuilderForNonConventionalCommits",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"It simply list the commits received")))),(0,i.kt)(o.Z,{slug:"docs/implementation",title:"cangulo.changelog - Idea and how I use it",tags:["nuke","cicd","cangulo.changelog","conventional_commits","changelog"],mdxType:"ShareCard"}))}p.isMDXComponent=!0}}]);